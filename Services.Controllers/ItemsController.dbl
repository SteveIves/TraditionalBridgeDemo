;;*****************************************************************************
;;
;; Title:       ItemsController.dbl
;;
;; Description: OData controller for the ITEMS structure.
;;
;;*****************************************************************************
;; WARNING: GENERATED CODE!
;; This file was generated by CodeGen. Avoid editing the file if possible.
;; Any changes you make will be lost of the file is re-generated.
;;*****************************************************************************

import Microsoft.AspNetCore.JsonPatch
import Microsoft.AspNetCore.Mvc
import Microsoft.AspNet.OData
import Microsoft.AspNet.OData.Routing
import Microsoft.EntityFrameworkCore
import Microsoft.EntityFrameworkCore.Infrastructure
import Harmony.Core.EF.Extensions
import Harmony.Core.Interface
import Harmony.OData
import Newtonsoft.Json
import Services.Models

namespace Services.Controllers

    ;;; <summary>
    ;;; OData controller for Items
    ;;; </summary>
    public partial class ItemsController extends ODataController
    
        public readwrite property DBContext, @Services.Models.DBContext
        public readwrite property ServiceProvider, @IServiceProvider

        ;;; <summary>
        ;;; Constructs a new instance of ItemsController
        ;;; </summary>
        ;;; <param name="aDbContext">Database context instance (DI)</param>
        ;;; <param name="aServiceProvider">Service provider instance (DI)</param>
        public method ItemsController
            aDbContext, @Services.Models.DBContext
            aServiceProvider, @IServiceProvider
        proc
            this.DBContext = aDbContext
            this.ServiceProvider = aServiceProvider
        endmethod

        {ODataRoute("Items")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get all Items
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItems, @IActionResult
        proc
            mreturn Ok(DBContext.Items.AsNoTracking())
        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get a single Item by primary key.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns a SingleResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItem, @SingleResult<Item>
            {FromODataUri}
            required in aItemNumber, int
        proc
            mreturn new SingleResult<Item>(DBContext.Items.AsNoTracking().FindQuery<Item>(DBContext, aItemNumber))
        endmethod

        {ODataRoute("Items(VendorNumber={aVendorNumber})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key VendorNumber.
        ;;; </summary>
        ;;; <param name="aVendorNumber">Vendor number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsByVendorNumber, @IActionResult
            {FromODataUri}
            required in aVendorNumber, int
        proc
            data result = DBContext.Items.AsNoTracking().FindAlternate("VendorNumber",aVendorNumber)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items(FlowerColor={aFlowerColor})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key Color.
        ;;; </summary>
        ;;; <param name="aFlowerColor">Flower color</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsByColor, @IActionResult
            {FromODataUri}
            required in aFlowerColor, String
        proc
            data result = DBContext.Items.AsNoTracking().FindAlternate("FlowerColor",aFlowerColor)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items(Size={aSize})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key Size.
        ;;; </summary>
        ;;; <param name="aSize">Size in gallons</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsBySize, @IActionResult
            {FromODataUri}
            required in aSize, int
        proc
            data result = DBContext.Items.AsNoTracking().FindAlternate("Size",aSize)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items(CommonName={aCommonName})")}
        {EnableQuery(MaxExpansionDepth=4)}
        ;;; <summary>
        ;;; Get items by alternate key key Name.
        ;;; </summary>
        ;;; <param name="aCommonName">Common name</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method GetItemsByName, @IActionResult
            {FromODataUri}
            required in aCommonName, String
        proc
            data result = DBContext.Items.AsNoTracking().FindAlternate("CommonName",aCommonName)
            if (result == ^null)
                mreturn NotFound()
            mreturn Ok(result)
        endmethod

        {ODataRoute("Items")}
        ;;; <summary>
        ;;; Create a new item (automatically assigned primary key).
        ;;; </summary>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PostItem, @IActionResult
            {FromBody}
            required in aItem, @Item
        proc
            ;;Remove the primary key fields from ModelState
            ModelState.Remove("ItemNumber")

            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)
            disposable data keyFactory = (@IPrimaryKeyFactory)ServiceProvider.GetService(^typeof(IPrimaryKeyFactory))
            ;;Get the next available primary key value
            KeyFactory.AssignPrimaryKey(aItem)

            ;;Add the new item
            DBContext.Items.Add(aItem)
            DBContext.SaveChanges(keyFactory)

            mreturn Created(aItem)

        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Create (with a client-supplied primary key) or replace a item.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PutItem, @IActionResult
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aItem, @Item
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Ensure that the key values in the URI win over any data that may be in the model object
            aItem.ItemNumber = aItemNumber

            try
            begin
                ;;Add and commit
                data existing = DBContext.Items.Find(aItemNumber)
                if(existing == ^null) then
                begin
                    DBContext.Items.Add(aItem)
                    DBContext.SaveChanges()
                    mreturn Created(aItem)
                end
                else
                begin
                    aItem.CopyTo(existing)
                    DBContext.SaveChanges()
                    mreturn NoContent()
                end
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Patch  (partial update) a item.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method PatchItem, @IActionResult
            {FromODataUri}
            required in aItemNumber, int
            {FromBody}
            required in aItem, @JsonPatchDocument<Item>
        proc
            ;; Validate inbound data
            if (!ModelState.IsValid)
                mreturn BadRequest(ModelState)

            ;;Patch the existing item
            try
            begin
                ;;Get the item to be updated
                data itemToUpdate = DBContext.Items.Find(aItemNumber)
                data patchError, @JsonPatchError, ^null
                ;;Did we find it?
                if(itemToUpdate == ^null)
                    mreturn NotFound()

                ;;Apply the changes to the item we read
                aItem.ApplyTo(itemToUpdate, lambda(error) { patchError = error })
                ;;if the patchdoc was bad return the error info
                if(patchError != ^null)
                    mreturn BadRequest(string.Format("Error applying patch document: error message {0}, caused by {1}", patchError.ErrorMessage, JsonConvert.SerializeObject(patchError.Operation)))

                ;;Update and commit
                DBContext.Items.Update(itemToUpdate)
                DBContext.SaveChanges()
            end
            catch (e, @InvalidOperationException)
            begin
                mreturn BadRequest(e)
            end
            endtry

            mreturn NoContent()

        endmethod

        {ODataRoute("Items(ItemNumber={aItemNumber})")}
        ;;; <summary>
        ;;; Delete a item.
        ;;; </summary>
        ;;; <param name="aItemNumber">Item number</param>
        ;;; <returns>Returns an IActionResult indicating the status of the operation and containing any data that was returned.</returns>
        public method DeleteItem, @IActionResult
            {FromODataUri}
            required in aItemNumber, int
        proc
            ;;Get the item to be deleted
            data itemToRemove = DBContext.Items.Find(aItemNumber)

            ;;Did we find it?
            if (itemToRemove == ^null)
                mreturn NotFound()

            ;;Delete and commit
            DBContext.Items.Remove(itemToRemove)
            DBContext.SaveChanges()

            mreturn NoContent()

        endmethod

    endclass

endnamespace